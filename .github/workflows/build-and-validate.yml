# Workflow for validating pull requests
name: build-and-validate
on:
  push:
  pull_request:
    types: [opened, reopened]
jobs:
  validate-tag-if-present:
    runs-on: ubuntu-latest

    steps:
      - name: TAGGED, Validate that the tag is in the correct format

        run: |
          echo "The GITHUB_REF: $GITHUB_REF"
          #First check to see if the release is a tag
          if [[ $GITHUB_REF =~ refs/tags/* ]]; then
            #Yes, this is a tag, so we need to test to make sure that the tag
            #is in the correct format (like v1.10.20)
            if [[ $GITHUB_REF =~ refs/tags/v[0-9]+.[0-9]+.[0-9]+ ]]; then
              echo "PASS: Tagged release with good format"
              exit 0
            else
              echo "FAIL: Tagged release with bad format"
              exit 1
            fi
          else
          echo "PASS: Not a tagged release"
          exit 0
          fi
  validate-and-build:
    runs-on: ubuntu-latest
    needs: [validate-tag-if-present]
    steps:
      - name: Configure Enrichment and Tag
        id: vars
        run: |
          if [ $(echo ${GITHUB_REF} | grep "^refs/tags/*") ]; then
            # failed to find the refs/tags/ beginning, grab and set the tag
            echo "Release is TAGGED!"
            echo "::set-output name=tag::${GITHUB_REF#refs/tags/}"
          else
            # Not a tagged release
            echo "Release is NOT TAGGED!"
            echo "::set-output name=tag::"
          fi

      - name: Check out the repository code
        uses: actions/checkout@v3

      - name: Update Version and Build number
        run : |
            # check if tag is set, get build number from the tag if set
            if [ -z "${{ steps.vars.outputs.tag }}" ]; then
                APP_VERSION=$(grep -oP "(\d+.\d+.\d+$)" dist/default/app.conf)
                echo "detected app version: $APP_VERSION"
            else
                APP_VERSION=$(echo ${{ steps.vars.outputs.tag }} | grep -oP "\d+.\d+.\d+")
                echo "app version: $APP_VERSION, set by tag: ${{ steps.vars.outputs.tag }}"
            fi

            # update build number and version for app
            sed -i "s/build = .*$/build = ${{ github.run_number }}/g" dist/default/app.conf
            sed -i "s/^version = .*$/version = $APP_VERSION/g" dist/default/app.conf
            sed -i "s/\"version\": .*$/\"version\": \"$APP_VERSION\"/g" dist/app.manifest
      
      - name: Build App
        run: |
          mkdir build
          mkdir build/Splunk_App_WatchGuard_Visibility
          cp -r dist/* build/Splunk_App_WatchGuard_Visibility/
          cd build
          tar -czf Splunk_App_WatchGuard_Visibility.tar.gz Splunk_App_WatchGuard_Visibility
          sha256sum Splunk_App_WatchGuard_Visibility.tar.gz > checksum.txt
      
      - name: store_artifacts
        uses: actions/upload-artifact@v3
        with:
          name: app-latest
          path: |
            build/Splunk_App_WatchGuard_Visibility.tar.gz
            build/checksum.txt

  run-appinspect:
    runs-on: ubuntu-latest
    needs: [validate-and-build]
    #Only run when tagged
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
        with:
          ref: 'main'

      - uses: actions/download-artifact@v3
        with:
          name: app-latest
          path: build/

      - name: Run App Inspect CLI
        uses: splunk/appinspect-cli-action@v1
        with:
          app_path: build/
          included_tags: cloud, splunk_appinspect

      - name: Upload App Inspect Result
        uses: actions/upload-artifact@v2
        with:
          name: appinspect_result.json
          path: appinspect_result.json

      - name: Upload Failed App Inspect Report
        uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: appinspect_failure_result.json
          path: appinspect_result.json

  update-github-sources:
    runs-on: ubuntu-latest
    needs: [validate-and-build, run-appinspect]
    #Only run when tagged
    if: startsWith(github.ref, 'refs/tags/')
    steps:

      - name: Checkout Repo
        uses: actions/checkout@v3
        with:
          ref: 'main'

      - uses: actions/download-artifact@v3
        with:
          name: app-latest
      
      - name: Stage artifacts in proper directories
        run: |
          mkdir latest-app
          tar -zxf Splunk_App_WatchGuard_Visibility.tar.gz -C latest-app --strip-components=1

      - name: Update github with version tag
        run: |
          rm -rf dist
          mv latest-app dist
          git config user.email "threatlab@watchguard.com"
          git config user.name "threatlab bot"
          git config --global push.default simple
          git add dist/*
          git commit --allow-empty -m "Update dist folder with the latest content associated with this tag"
          git push

  publish-github-release:
    runs-on: ubuntu-latest
    needs: [validate-and-build, run-appinspect]
    #Only run when tagged
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: app-latest

      - name: Set tag
        id: vars
        run: echo "::set-output name=tag::${GITHUB_REF#refs/*/}"

      - name: Rename the content-update appropriately
        run: |
          cp Splunk_App_WatchGuard_Visibility.tar.gz Splunk_App_WatchGuard_Visibility-${{ steps.vars.outputs.tag }}.tar.gz
          #No checksum on the reports
          cp checksum.txt checksum-${{ steps.vars.outputs.tag }}.txt

      - name: Upload Release Artifacts
        uses: softprops/action-gh-release@v1
        with:
          files: |
            Splunk_App_WatchGuard_Visibility-${{ steps.vars.outputs.tag }}.tar.gz
            checksum-${{ steps.vars.outputs.tag }}.txt